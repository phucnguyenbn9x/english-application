package View.GUI;

import Controller.Controller;
import Controller.WordControl;
import Model.Collection;
import Model.Word;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * represent for learning dialog
 *
 * @author Nguyễn Phúc
 */
public class LearningDialog extends javax.swing.JFrame {

    // controller of this application
    private Controller mainController;
    // controller of words
    private WordControl Controller;
    // test dialog
    private TestDialog testDialog;
    // maximum number of word for a lecture
    private int NUMBER_OF_WORD_FOR_LECTURE = 10;
    // current word to learn
    private Word currentWord = null;
    // list words to learn
    private ArrayList<Word> lecture = null;
    // current learning progress
    private int currentProgress = 0;
    // maximum progress
    private final int MAX_PROGRESS = 100;
    // Biến cho phép sinh ngẫu nhiên
    Random random = new Random();
    // variable check that dialog for learning words from collection or random words form dictionary
    private boolean isLearningCollection;

    /**
     * Creates new form LearningDialog
     */
    public LearningDialog(Controller controller) {
        this.mainController = controller;
        this.Controller = controller.getWordController();
        initComponents();
        setIcon();
        setBackground();
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                setVisible(false);
                HomeScreen homeScreen = new HomeScreen(controller);
                homeScreen.setVisible(true);
            }
        });
        setupLecture();
        this.testDialog = new TestDialog(controller);
    }

    /**
     * setting up lecture to learn
     *
     * @param _lecture list word need to learn
     */
    public void setupLecture(ArrayList<Word> _lecture) {
        this.isLearningCollection = true;
        Collections.shuffle(_lecture, random);
        lecture.clear();
        for(int i = 0; i < _lecture.size(); ++i) {
            lecture.add(_lecture.get(i));
        }
        System.out.println(_lecture.size());
        this.currentProgress = 0;
        currentWord = _lecture.get(0);
        setNewWordToLearn(currentWord);
    }

    /**
     * setting up lecture to learn
     */
    private void setupLecture() {
        this.isLearningCollection = false;
        if (lecture == null) {
            lecture = new ArrayList<Word>();
        }
        int numOfWord = Controller.getListWord().size();
        if (numOfWord <= NUMBER_OF_WORD_FOR_LECTURE) {
            NUMBER_OF_WORD_FOR_LECTURE = numOfWord;
        }
        for (int i = 0; i < NUMBER_OF_WORD_FOR_LECTURE; ++i) {
            lecture.add(Controller.getWord(random.nextInt(numOfWord)));
        }
        currentWord = lecture.get(0);
        setNewWordToLearn(currentWord);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbStop = new javax.swing.JButton();
        jbNext = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jlWord = new javax.swing.JLabel();
        jPronunce = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMeaning = new javax.swing.JTextArea();
        jWordProgress = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jImage = new javax.swing.JLabel();
        jProgressLearning = new javax.swing.JProgressBar();

        setTitle("Learning");
        setResizable(false);

        jbStop.setText("Stop");
        jbStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStopActionPerformed(evt);
            }
        });

        jbNext.setText("Next");
        jbNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextActionPerformed(evt);
            }
        });
        jbNext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbNextKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jlWord.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jlWord.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlWord.setText("jLabel1");
        jlWord.setAlignmentX(0.5F);
        jlWord.setAutoscrolls(true);

        jPronunce.setBackground(new java.awt.Color(255, 255, 255));
        jPronunce.setFont(new java.awt.Font("Dialog", 2, 14)); // NOI18N
        jPronunce.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPronunce.setText("jLabel2");

        jMeaning.setEditable(false);
        jMeaning.setBackground(new java.awt.Color(248, 248, 248));
        jMeaning.setColumns(20);
        jMeaning.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jMeaning.setLineWrap(true);
        jMeaning.setRows(5);
        jMeaning.setWrapStyleWord(true);
        jMeaning.setBorder(null);
        jMeaning.setCaretColor(new java.awt.Color(238, 238, 238));
        jMeaning.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMeaning.setHighlighter(null);
        jMeaning.setRequestFocusEnabled(false);
        jMeaning.setSelectionColor(new java.awt.Color(255, 255, 255));
        jMeaning.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMeaningKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jMeaning);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Word learning's progress");

        jImage.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jWordProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jImage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlWord, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPronunce, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlWord, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPronunce, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jImage, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jWordProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        jProgressLearning.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jbStop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbNext, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jProgressLearning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbNext, jbStop});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jProgressLearning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbStop)
                    .addComponent(jbNext))
                .addGap(14, 14, 14))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jbNext, jbStop});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * set new word to learn
     *
     * @param newWord new word to learn
     */
    private void setNewWordToLearn(Word newWord) {
        this.currentWord = newWord;
        jlWord.setText(newWord.getName());
        jMeaning.setText(newWord.getMeaning());
        jPronunce.setText(newWord.getPronounciation());
        Controller.createImage(newWord.getWordImage(), jImage);
        jWordProgress.setValue(newWord.getLearnProgress() * 20);
        jProgressLearning.setValue(currentProgress);
        currentProgress += 10;
    }

    /**
     * function check if lecture is complete
     *
     * @return result of function
     */
    private boolean isCompleteLecture() {
        boolean complete = true;
        if (currentProgress <= MAX_PROGRESS) {
            complete = false;
        }
        return complete;
    }

    /**
     * Tạo sự kiện cho jbNext
     *
     * @param evt Sự kiện
     */
    private void jbNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextActionPerformed
        if (!isCompleteLecture()) {
            this.currentWord = lecture.get((this.currentProgress / 10) % lecture.size());
            this.currentWord.increaseProgress();
            setNewWordToLearn(this.currentWord);
        } else {
            this.testDialog.setupTest(this.lecture);
            int reply = JOptionPane.showConfirmDialog(null, "Learning done\nMake a test now?", "Make a test", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                this.testDialog.setVisible(true);
                return;
            } else {
                Controller.updateWord(lecture);
                if(this.isLearningCollection) {
                    this.setVisible(false);
                    return;
                }
                reply = JOptionPane.showConfirmDialog(null, "Do you want to continue?", "Continue", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    setupLecture();
                    currentProgress = 0;
                    return;
                }
            }
            this.setVisible(false);
            this.lecture.clear();
            this.currentProgress = 0;
        }
    }//GEN-LAST:event_jbNextActionPerformed

    /**
     * Tạo sự kiện cho jbStop
     *
     * @param evt Sự kiện
     */
    private void jbStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStopActionPerformed
        Controller.updateWord(lecture);
        this.setVisible(false);
        this.lecture.clear();
    }//GEN-LAST:event_jbStopActionPerformed

    private void jMeaningKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMeaningKeyPressed
        onKeyPressed(evt);
    }//GEN-LAST:event_jMeaningKeyPressed

    private void jbNextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbNextKeyPressed
        onKeyPressed(evt);
    }//GEN-LAST:event_jbNextKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextArea jMeaning;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressLearning;
    private javax.swing.JLabel jPronunce;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar jWordProgress;
    private javax.swing.JButton jbNext;
    private javax.swing.JButton jbStop;
    private javax.swing.JLabel jlWord;
    // End of variables declaration//GEN-END:variables

    /**
     * Cài đặt Icon
     */
    private void setIcon() {
        ImageIcon icon = new ImageIcon("src/View/TitleIcons/IconLearningDialog.png");
        setIconImage(icon.getImage());
    }

    /**
     * Cài đặt background
     */
    private void setBackground() {
        getContentPane().setBackground(new Color(200, 200, 200));
    }

    private void onKeyPressed(java.awt.event.KeyEvent evt) {
        switch (evt.getKeyCode()) {
            case 39:
                jbNext.doClick();
                break;
            default:
                break;
        }
    }
}
